@page "/"
@using NameGenerator.Generators;
@using web_client.Services
@inject IKeyboardService _keyboardService
@inject IJSRuntime JsRunTime

<input @bind="_username" />
<br/> 
<div tabindex="0" @ref="_keymappedKeys" @onkeydown="KeyPress">
    
    <div style="margin: auto; width: 30%">
        <img src="images/keyboard.jpg" style="z-index: -1;position:absolute; display: block; margin: auto; width:30%;" />
        <div style="z-index: 1;position:absolute;align-content: center;width: 30%;margin: auto;padding-left: 1em;">
            <div style="padding-top:16rem"></div>
            <button style="background-color:white;color:black" class="btn btn-primary" @onclick="async () => await SendNote(Note.C)">C</button>
            <button style="background-color:black;color:white" class="btn btn-primary" @onclick="async () => await SendNote(Note.D_flat)">Db</button>
            <button style="background-color:white;color:black" class="btn btn-primary" @onclick="async () => await SendNote(Note.D)">D</button>
            <button style="background-color:black;color:white" class="btn btn-primary" @onclick="async () => await SendNote(Note.E_flat)">Eb</button>
            <button style="background-color:white;color:black" class="btn btn-primary" @onclick="async () => await SendNote(Note.E)">E</button>
            <button style="margin-left: 0.8em;background-color:white;color:black" class="btn btn-primary" @onclick="async () => await SendNote(Note.F)">F</button>
            <button style="background-color:black;color:white" class="btn btn-primary" @onclick="async () => await SendNote(Note.G_flat)">Gb</button>
            <button style="background-color:white;color:black" class="btn btn-primary" @onclick="async () => await SendNote(Note.G)">G</button>
            <button style="background-color:black;color:white" class="btn btn-primary" @onclick="async () => await SendNote(Note.A_flat)">Ab</button>
            <button style="background-color:white;color:black" class="btn btn-primary" @onclick="async () => await SendNote(Note.A)">A</button>
            <button style="background-color:black;color:white" class="btn btn-primary" @onclick="async () => await SendNote(Note.B_flat)">Bb</button>
            <button style="background-color:white;color:black" class="btn btn-primary" @onclick="async () => await SendNote(Note.B)">B</button>
        </div>
    </div>

    @foreach (var (username, note) in _keyboardService.PlayedNotes)
    {
        <p>@username played: @note</p>
    }
</div>

@code {
    private ElementReference _keymappedKeys;
    private string _username;

    protected override async Task OnInitializedAsync()
    {
        Inialize();
    }

    private void Inialize()
    {
        GamerTagGenerator Generator = new GamerTagGenerator();
        _username = Generator.Generate();
        StateHasChanged();
        _keyboardService.SetupReceiver(async (note, username) => await PlayNote(note));
    }

    private async Task SendNote(Note note)
    {
        await _keyboardService.SendNote(note, _username);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await _keymappedKeys.FocusAsync();
    }

    private async Task KeyPress(KeyboardEventArgs e)
    {
        Note? note = e.Key switch
        {
            "s" => Note.C,
            "e" => Note.D_flat,
            "d" => Note.D,
            "r" => Note.E_flat,
            "f" => Note.E,
            "g" => Note.F,
            "y" => Note.G_flat,
            "h" => Note.G,
            "u" => Note.A_flat,
            "j" => Note.A,
            "i" => Note.B_flat,
            "k" => Note.B,
            _ => null
        };

        if (note is null) return;

        await _keyboardService.SendNote(note.Value, _username);
    }

    private async Task PlayNote(Note note)
    {
        await InvokeAsync(() => StateHasChanged());
        try
        {
            await JsRunTime.InvokeAsync<int>($"MyLib.playNote", (int)note);
        }
        catch (Microsoft.JSInterop.JSException) { } // TODO resolve: excpetion thrown by Tone.js 
    }
}